#!/usr/bin/env python
#
"""
	Erlang-transmission daemon control
	
	@author Jean-Lou Dupont
"""
import os
import sys
import subprocess
from optparse import OptionParser

class Commands(object):
	
	cmdStart="erl -pa %s -detached -sname transmission -run transmission_daemon start"
	cmdStop= "escript etrx_control -q stop"
	
	nostop = "cannot stop daemon"
	
	codes = {	0: {"msg":"ok",                "canstart": True,  "stop":"ok"},
				1: {"msg":"unspecified error", "canstart": True,  "stop":nostop}, 
				2: {"msg":"daemon found",      "canstart": False, "stop":nostop}, 
				3: {"msg":"daemon not found",  "canstart": True,  "stop":nostop}, 
				4: {"msg":"library not found", "canstart": False, "stop":nostop},
				5: {"msg":"node not found",    "canstart": True,  "stop":nostop},
			}
	
	def start(self, feedback):
		print "start %s" % feedback
		
	def stop(self, feedback):
		self.dostop()
	
	def dostart(self):
		cwd=os.getcwd()
		cmd=self.cmdStart % (cwd+"/ebin")
		proc = subprocess.Popen(cmd, shell=True)
		return proc.wait()
		
	def dostop(self):
		proc = subprocess.Popen(self.cmdStop, shell=True)
		proc.wait()
		ret=proc.returncode
		ctx=self.getCtx(ret)
		print "etrx: %s [%s]\n" % (ctx["stop"], ctx["msg"])

	def getCtx(self, code):
		ctx=self.codes.get(code, self.codes[1])
		return ctx			


def main():
	usage= """etrx [-q] [start|stop] 
"""
	
	parser=OptionParser(usage)
	parser.add_option("-q", "--quiet",
                  action="store_false", dest="feedback", default=True,
                  help="don't print status messages to stdout")
                  
	(options, args) = parser.parse_args()
    
	if len(args) != 1:
		parser.error("incorrect number of arguments")
      
	cmd = args[0]
	feedback = options.feedback
	
	try:
		getattr(Commands(), cmd)(feedback)
	except Exception, e:
		print "Exception [%s]\n" % e
		print "! invalid command [%s]\n" % cmd

	
if __name__=="__main__":
	main()
