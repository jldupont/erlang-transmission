#!/usr/bin/env escript
%% -*- erlang -*-
%%! -sname etrx
%%
%% @author Jean-Lou Dupont
%%

cmd_daemon1() -> "erl -detached -pa ".
cmd_daemon2() -> " -sname transmission -run transmission_daemon start".
cmd_daemon3() -> "./etrx_start".

err_lib()    -> "erlang-transmission not found".
err_cmd()    -> "unknown command: ".
err_daemon() -> "daemon not found".
msg_kill()   -> "stop command sent".

main([]) ->
	main([start]);

main(["stop"]) ->
	case getstatus() of
		daemon_not_found ->
			err(err_daemon());
					
		{pid, Pid} ->
			os:cmd("kill -9 "++Pid),
			msg(msg_kill()),
			halt(0);
			
		{error, lib_not_found} ->
			err(err_lib())
	end;		
	

main(["start"]) ->

	%%for development
	code:add_pathsa(["./ebin"]),
	
	case getstatus() of
		daemon_not_found ->
			trystart();
					
		{pid, Pid} ->
			err("daemon running, Pid:", Pid);
			
		{error, lib_not_found} ->
			err(err_lib())
	end;
	
	
	
main([NA]) ->
	err(err_cmd(), NA).


getstatus() ->
	try
		Status=rpc(status),
		case Status of
			rpcerror ->
				daemon_not_found;
				
			{pid, Pid} ->
				{pid, Pid}	
		end
	catch
		error:undef ->
			{error, lib_not_found};
		
		_X:_Y ->
			{error, unknown}
	end.


trystart() ->
	%%{ok, Dir}=file:get_cwd(),
	%%io:format("trystart, dir[~s]~n", [Dir]),
	%%Command=cmd_daemon1() ++ Dir ++ "/ebin" ++ cmd_daemon2(),
	%%io:format("Command [~s]~n", [Command]),
	%%Ret=os:cmd(Command),
	Ret=os:cmd(cmd_daemon3()),
	msg(Ret),
	ok.
	
	
err(Msg) ->
	io:format("etrx: ~s~n", [Msg]),
	halt(1).
	
err(Msg1, Msg2) ->
	io:format("etrx: ~s~s~n", [Msg1, Msg2]),
	halt(1).

msg(Msg) ->
	io:format("etrx: ~s~n", [Msg]),
	halt(0).
	
%%msg(Msg1, Msg2) ->
%%	io:format("etrx: ~s~s~n", [Msg1, Msg2]),
%%	halt(0).
	
	


%%%%%%%%%%%%%%	
%% RPC related
%%%%%%%%%%%%%%
	
rpc(Command) ->
	case dorpc(Command) of
		{badrpc, _} ->
			daemon_not_found;

		Response ->
			Response
	end.
	


dorpc(Message) ->
	Node=tools:make_node(transmission),
	
	case rpc:call(Node, transmission_daemon, api, [Message], 2000) of
		{badrpc, _Reason} ->
			%%io:format("daemon communication error [~p]~n", [Reason]),
			rpcerror;
		
		Other ->
			Other
	end.
